<?xml version="1.0" encoding="utf-8"?><!--
	/**
 * SlimFBViewer is an Open Source app realized by Cactus World Android Development <android@cactus-world.de> based on SlimFacebook by Leonardo Rignanese <rignanese.leo@gmail.com>
 * GNU GENERAL PUBLIC LICENSE  Version 2, June 1991
 * GITHUB: https://github.com/cactus_world/SlimFBViewer
 *adaptMessengerInfoView(\'.rq0escxv.l9j0dhe7.du4w35lb.j83agx80.cbu4d94t.g5gj957u.f4tghd1a.ifue306u.kuivcneq.t63ysoy8 {top:76px;}\');

 */
-->
<resources>
	<string name="fixComposeMessageAbort" translatable="false">
        javascript:function fixComposeMessageAbort(){
        var a=(document.
    </string>
	<string name="getNotificationsCounts" translatable="false">
		function getNotificationsCounts(){
			var screen = document.getElementById(\'screen-root\');
			while (typeof screen === \'undefined\'){
				screen = document.getElementById(\'screen-root\');
			}
			var buttons = screen.getElementsByClassName(\'m bg-s3\');
			while (typeof buttons === \'undefined\'){
				buttons = screen.getElementsByClassName(\'m bg-s3\');
			}
			console.log(buttons);
			var string = \'feed:\';
			var tmp =buttons[1].getElementsByClassName(\'f6\');
			console.log("Element 1:" + tmp.item(0).textContent);

			if (tmp.length > 0)
			{
				string += tmp.item(0).textContent;
			}
			else
			{
				string += \'0\';
			}
			string += \';requests:\';1
			tmp = buttons[3].getElementsByClassName(\'f6\');
			if (tmp.length > 0)
			{
				console.log("Element 2:" + tmp.item(0).textContent);
				string += tmp.item(0).textContent;
			}
			else
			{
				string += \'0\';
			}
			string += \';notifications:\';
			tmp = buttons[9].getElementsByClassName(\'f6\');
			if (tmp.length > 0)
			{
				console.log("Element 3:" + tmp.item(0).textContent);
				string += tmp.item(0).textContent;
			}
			else
			{
				string += \'0\';
			}
			string += \';\';
			return (string);
		}
		getNotificationsCounts();
	</string>
	<string name="removeBlueBar" translatable="false">
		javascript:function removeBlueBar(pageType){
		console.log(\'Running BlueBarRemoval...\');
		window.addEventListener(\'load\',removeBlueBar.bind(null,pageType));
		if (typeof bluebar === \'undefined\')
		{
			var bluebar=document.getElementById(\'screen-root\');
			console.log(document);
			console.log(bluebar);
			console.log(bluebar.childNodes);
			var style = bluebar.childNodes[0];
			if (style.childNodes[0].childElementCount != 0){
				style = style.childNodes[0];
			}else if (style.childNodes[1].childElementCount != 0 &amp;&amp; pageType !== \'isFacebookNewsFeedUrl\'){
				style = style.childNodes[1];
			}else{
				console.log(\'Setting Timeout for BlueBarRemoval\');
				window.setTimeout(function (){removeBlueBar(pageType);},200);
				return;
			}
			style = style.childNodes[1];
			if (style === null)
			{
				return;
			};
		    var style_string;
			try {
				style_string = style.getAttribute(\'style\');
			}
			catch (e){};
			style_string += \'display: none\';
			style.setAttribute(\'style\',style_string);
		}else{
			bluebar=document.getElementById(\'screen-root\');
			console.log(document);
			console.log(bluebar);
			console.log(bluebar.childNodes);
			var style = bluebar.childNodes[0];
			if (style.childNodes[0].childElementCount != 0){
				style = style.childNodes[0];
			}else if (style.childNodes[1].childElementCount != 0 &amp;&amp; pageType !== \'isFacebookNewsFeedUrl\'){
				style = style.childNodes[1];
			}else{
				console.log(\'Setting Timeout for BlueBarRemoval\');
			window.setTimeout(function (){removeBlueBar(pageType);},200);
				return;
			}
			style = style.childNodes[1];
			if (style === null)
			{
				return;
			};
			var style_string;
			try {
				style_string = style.getAttribute(\'style\');
			}
			catch (e){};
			style_string += \'display: none\';
			style.setAttribute(\'style\',style_string);
		}
		}

	</string>
	<string name="removeBlueBarNewsFeed" translatable="false">
		javascript:function removeBlueBarNewsFeed(){
		console.log(\'Running BlueBarRemovalForNewsFeed...\');
		if (typeof bluebar === \'undefined\')
		{
			var bluebar=document.getElementById(\'screen-root\');
			console.log(document);
			console.log(bluebar);
			console.log(bluebar.childNodes);
			var style = bluebar.childNodes[0];
			if (style !== null &amp;&amp; style.childNodes[0].childElementCount != 0){
				style = style.childNodes[0];
			}else {
				<!-- console.log(\'Setting Timeout for BlueBarRemovalNewsFeed\');
				window.setTimeout(removeBlueBarNewsFeed,200);-->
				return;
			}
			if (style.childNodes[1] !== null){
				style = style.childNodes[1];
			}else{
				<!--console.log(\'Setting Timeout for BlueBarRemovalNewsFeed\');
				window.setTimeout(removeBlueBarNewsFeed,200);-->
				return;
			}
			if (style === null)
			{
				return;
			};
			var style_string;
			try {
				style_string = style.getAttribute(\'style\');
			}
			catch (e){};
			console.log (\'Style String #1: \' + style_string);
			if (style_string !== null &amp;&amp; !style_string.includes(\'display: none;\'))
			{
				style_string += \'display: none;\';
			}
			else{
				<!-- console.log(\'Setting Timeout for BlueBarNewsFeedRemoval\');
			     window.setTimeout(function (){removeBlueBarNewsFeed();},200);-->
				return;
			}
			style.setAttribute(\'style\',style_string);
		}else{
			bluebar=document.getElementById(\'screen-root\');
			<!--console.log(document);
			console.log(bluebar);
			console.log(bluebar.childNodes);-->
			var style = bluebar.childNodes[0];
			if (style !== null &amp;&amp; style.childNodes[0].childElementCount != 0){
				style = style.childNodes[0];
			}else{
				<!--console.log(\'Setting Timeout for BlueBarNewsFeedRemoval\');
			    window.setTimeout(function (){removeBlueBarNewsFeed();},200);-->
				return;
			}
			if (style.childNodes[1] !== null){
				style = style.childNodes[1];
			}else{
				<!--console.log(\'Setting Timeout for BlueBarRemovalNewsFeed\');
				window.setTimeout(removeBlueBarNewsFeed,200);-->
				return;
			}
			if (style === null)
			{
				return;
			};
			var style_string;
			try {
				style_string = style.getAttribute(\'style\');
			}
			catch (e){};
			console.log (\'Style String #2: \' + style_string);
			if (style_string !== null &amp;&amp; !style_string.includes(\'display: none;\'))
			{
				style_string += \'display: none;\';
			}else{
				<!--console.log(\'Setting Timeout for BlueBarRemoval\');
			    window.setTimeout(function (){removeBlueBar(pageType);},200);-->
				return;
			}
			style.setAttribute(\'style\',style_string);
		}
			window.SlimFBViewer.setPageLocation(window.location.href);
		}
		try{
			window.removeEvent(\'load\',removeBlueBarNewsFeed);
			window.removeEvent(\'load\',removeBlueBar2);
		}
		catch(e)
		{};
        window.addEventListener(\'load\',removeBlueBarNewsFeed());
		if(document.readyState === \'complete\') {
    		console.log(\'Document is ready.\');
		}
		if(document.readyState !== \'complete\') {
    		console.log(\'Document is not ready.\');
		}

	</string>
	<string name="removeBlueBar2" translatable="false">
		javascript:function removeBlueBar2(){
		console.log(\'Running BlueBarRemoval2...\');
		if (typeof bluebar === \'undefined\')
		{
			var bluebar=document.getElementById(\'screen-root\');
			console.log(document);
			console.log(bluebar);
			console.log(bluebar.childNodes);
			var style = bluebar.childNodes[0];
			if (style !== null \&amp;\&amp; style.childNodes[1] !== null \&amp;\&amp; style.childNodes[1].childElementCount != 0 ){
				style = style.childNodes[1];
			}else{
				<!--console.log(\'Setting Timeout for BlueBarRemoval\');
				window.setTimeout(function (){removeBlueBar2();},200);-->

				return;
			}
			<!-- style = style.childNodes[1]; -->
			if (style === null)
			{
				return;
			};
			var style_string;
			try {
				style_string = style.getAttribute(\'style\');
			}
			catch (e){};
			if (style_string !== null &amp;&amp; !style_string.includes(\'display: none;\'))
			{
				style_string += \'display: none;\';
			}
			else{
				return;
			}
			style.setAttribute(\'style\',style_string);
		}else{
			bluebar=document.getElementById(\'screen-root\');
			<!--console.log(document);
			console.log(bluebar);
			console.log(bluebar.childNodes);-->
			var style = bluebar.childNodes[0];
			if (style !== null &amp;&amp;style.childNodes[1] !== null \&amp;\&amp;  style.childNodes[1].childElementCount != 0 ){
				style = style.childNodes[1];
			}else{
				<!--console.log(\'Setting Timeout for BlueBarRemoval\');
				window.setTimeout(function (){removeBlueBar2();},200);-->
				return;
			}
			<!-- style = style.childNodes[1];-->
			if (style === null)
			{
				return;
			};
			var style_string;
			try {
				style_string = style.getAttribute(\'style\');
			}
			catch (e){};
			if (style_string !== null &amp;&amp; !style_string.includes(\'display: none;\'))
			{
				style_string += \'display: none;\';
			}
			style.setAttribute(\'style\',style_string);
		}
		}
		try{
			window.removeEvent(\'load\',removeBlueBar2);
			window.removeEvent(\'load\',removeBlueBarNewsFeed);
		}
		catch(e)
		{};
        window.addEventListener(\'load\',removeBlueBar2());
	</string>


	<string name="removeBlueBarNewsFeed2" translatable="false">
		javascript:function removeBlueBarNewsFeed2(mutations,observerNewsFeed){
		console.log(\'Running BlueBarRemovalNewsFeed2...\');
		var style;
		if (typeof bluebarNewsFeed === \'undefined\')
		{
			var bluebarNewsFeed=document.getElementById(\'screen-root\');
			console.log(document);
			console.log(bluebarNewsFeed);
			console.log(bluebarNewsFeed.childNodes);
			style = bluebarNewsFeed.childNodes[0];
			console.log(\'Childnode 0:\'+style);

		if (style === null)
			{
				return;
			};
			style.style.height=\'auto\';
			console.log(\'Node is:\'+style.childNodes[0]);
			console.log(\'Child-Node 1 is:\'+style.childNodes[0].childNodes[2]);
			console.log(\'Child-Node 2 is:\'+style.childNodes[0].childNodes[3]);
			style.childNodes[0].childNodes[2].style.display=\'none\';
			style.childNodes[0].childNodes[3].style.display=\'none\';
		}else{
			bluebar=document.getElementById(\'screen-root\');
			style = bluebarNewsFeed.childNodes[0];

		if (style === null)
			{
				return;
			};
			style.style.height=\'auto\';
			console.log(\'Node is:\'+style.childNodes[0]);

			console.log(\'Child-Node 1 is:\'+style.childNodes[0].childNodes[2]);
			console.log(\'Child-Node 2 is:\'+style.childNodes[0].childNodes[3]);
			style.childNodes[0].childNodes[2].style.display=\'none\';
			style.childNodes[0].childNodes[3].style.display=\'none\';
			observerNewsFeed.disconnect();
		}
		}
		var observerNewsFeed;

		if (typeof observerNewsFeed === \'undefined\')
		{
			observerNewsFeed = new MutationObserver(removeBlueBarNewsFeed2);

		}
		try{
			const config = {childList:true,
							attributes:true,
							characterData:true,
							subtree:true };
			<!--observerNewsFeed.observe(document.getElementById(\'screen-root\').childNodes[0],config);-->
			observerNewsFeed.observe(document,config);
		}catch (e){
			<!--observerNewsFeed.observe(document.getElementById(\'screen-root\').childNodes[0],config);-->
			observerNewsFeed.observe(document,config);
		};

	</string>
	<string name="removeBlueBar3" translatable="false">
		javascript:function removeBlueBar3(mutations,observer){
		console.log(\'Running BlueBarRemoval3...\');
		var style;
		if (typeof bluebar === \'undefined\')
		{
			var bluebar=document.getElementById(\'screen-root\');
			console.log(document);
			console.log(bluebar);
			console.log(bluebar.childNodes);
			style = bluebar.childNodes[0];
			console.log(\'Childnode 0:\'+style);

		if (style === null)
			{
				return;
			};
			style.style.height=\'auto\';
			console.log(\'Node is:\'+style);
			console.log(\'Child-Node 1 is:\'+style.childNodes[1]);
			console.log(\'Child-Node 2 is:\'+style.childNodes[1].childNodes[2]);
			style.childNodes[1].childNodes[2].style.display=\'none\';
			if (style.childNodes[1].childNodes[2].style.display== \'none\')
			{
				observer.disconnect();
			}
		}else{
			bluebar=document.getElementById(\'screen-root\');
			console.log(document);
			console.log(bluebar);
			console.log(bluebar.childNodes);
			style = bluebar.childNodes[0];
			console.log(\'Childnode 0:\'+style);

		if (style === null)
			{
				return;
			};
			style.style.height=\'auto\';
			console.log(\'Node is:\'+style.childNodes[0]);
			console.log(\'Child-Node 1 is:\'+style.childNodes[1]);
			console.log(\'Child-Node 2 is:\'+style.childNodes[1].childNodes[2]);
			style.childNodes[1].childNodes[2].style.display=\'none\';
			if (style.childNodes[1].childNodes[2].style.display== \'none\')
			{
				observer.disconnect();
			}
		}
		}
		var observer;

		if (typeof observer === \'undefined\')
		{
			observer = new MutationObserver(removeBlueBar3);

		}
		try{
			const config = {childList:true,
							attributes:true,
							characterData:true,
							subtree:true };
			<!-- observer.observe(document.getElementById(\'screen-root\'),config); -->
			observer.observe(document,config);
		}catch(e){
			<!-- observer.observe(document.getElementById(\'screen-root\'),config); -->
			observer.observe(document,config);
		}
	</string>
	<string name="addBlueBar" translatable="false">
		javascript:function addBlueBar(){
		if (typeof bluebar === \'undefined\')
		{
			bluebar=document.getElementsByClassName(\'m displayed\');
			bluebar[0].removeAttribute(\'style\');
		}else{
			bluebar=document.getElementsByClassName(\'m displayed\');
			bluebar[0].removeAttribute(\'style\');
		}
		}
		addBlueBar();
	</string>
	<string name="removeBlueBar.old" translatable="false">
		javascript:function removeBlueBar(){
		if (typeof bluebar === \'undefined\')
		{
			var bluebar=document.getElementById(\'header\');
			var html = bluebar.outerHTML;
			bluebar.outerHTML = html.replace(\'data-sigil=\"MTopBlueBarHeader\"\',\'data-sigil=\"MTopBlueBarHeader\" style=\"display:none\"\');
		}else{
			bluebar=document.getElementById(\'header\');
			html = bluebar.outerHTML;
			bluebar.outerHTML = html.replace(\'data-sigil=\"MTopBlueBarHeader\"\',\'data-sigil=\"MTopBlueBarHeader\" style=\"display:none\"\');
		}
		}
		removeBlueBar();
	</string>
	<string name="addBlueBar.old" translatable="false">
		javascript:function addBlueBar(){
		if (typeof bluebar === \'undefined\')
		{
			var bluebar=document.getElementById(\'header\');
			var html = bluebar.outerHTML;
			bluebar.outerHTML = html.replace(\'data-sigil=\"MTopBlueBarHeader\" style=\"display:none\"\',\'data-sigil=\"MTopBlueBarHeader\"\');
		}else{
			bluebar=document.getElementById(\'header\');
			html = bluebar.outerHTML;
			bluebar.outerHTML = html.replace(\'data-sigil=\"MTopBlueBarHeader\" style=\"display:none\"\',\'data-sigil=\"MTopBlueBarHeader\"\');
		}
		}
		addBlueBar();
	</string>
	<string name="openSearch" translatable="false">
		javascript:function search(){
		if (typeof search_button === \'undefined\')
		{
			var search_button = document.getElementsByName(\'Suchen\');
			search_button[0].click();
		}
		else{
			search_button = document.getElementsByName(\'Suchen\');
			search_button[0].click();
		}
		}
		search();
	</string>
	<string name="editCss" translatable="false">
		javascript:function addStyle(css) {
		var node = document.createElement(\'style\');
		node.innerHTML = css;
        document.body.appendChild(node);
		}
		addStyle(\'$css\');
	</string>
    <string name="fixMessages" translatable="false">
		javascript:function fixMessages() {
		var a=(document.querySelectorAll(\'#messages_jewel ._19no.touchable\'))[0];
        a.href=\'https://slimsocial.leo\';
        a.setAttribute(\'data-autoid\',\'\');
		}
		fixMessages();
</string>
	<string name="removeBackButtons" translatable="false">
		javascript:function removeBackButtons(currentView) {
			console.log(\'in removeBackButtons\' + currentView);
			if (typeof backButtons === \'undefined\'){
		   		var backButtons = document.getElementsByClassName(\'m\');
			}else{
				backButtons = document.getElementsByClassName(\'m\');
			}
			console.log(backButtons+backButtons[5]+backButtons[7]);
			switch (currentView) {
				case \'search\':
					if (backButtons[5] !== null){
						var style_string = backButtons[5].getAttribute(\'style\');
						if (!style_string.includes(\'display: none;\'))
						{
							style_string += \'display: none;\';
						}
						backButtons[5].setAttribute(\'style\',style_string);

						console.log(\'Setting Attribute done\');
						if (backButtons[4] !== null){
							backButtons[4].removeAttribute(\'data-action-id\');
						}
					}else{
						console.log(\'Setting Timeout\');
						window.setTimeout(function (){removeBackButtons(currentView);},200);
					}
					break;
				case \'bookmarks\':
					if (backButtons[7] !== null){
						var style_string = backButtons[7].getAttribute(\'style\');
						if (!style_string.includes(\'display: none;\'))
						{
							style_string += \'display: none;\';
						}
						backButtons[7].setAttribute(\'style\',style_string);
						if (backButtons[6] !== null){
							backButtons[6].removeAttribute(\'data-action-id\');
						}
						console.log(\'Setting Attribute done\');
					}else{
						console.log(\'Setting Timeout\');
						window.setTimeout(function (){removeBackButtons(currentView);},200);
					}
					break;
				default:
			}
		}
	</string>

	<string name="getNotificationsStates" translatable="false">
		function getNotificationStates(){
		var newsFeed=false;
		console.log(\'Window Location: \' + window.location);
		if (window.location.href === \'https://touch.facebook.com/\')
		{
			newsFeed=true;
			console.log(\'Newsfeed page\');
		}

		var screen = document.getElementById(\'screen-root\');
		while (typeof screen === \'undefined\'){
			screen = document.getElementById(\'screen-root\');
		}
		var buttons = screen.getElementsByClassName(\'m\');
		while (typeof buttons === \'undefined\'){
			buttons = screen.getElementsByClassName(\'m\');
		}
		console.log(\'IN SCRIPT:\'+buttons);
		if (!newsFeed)
		{
			var string = \'feed:\';
			try{
				string+= buttons.item(2).childNodes.item(2).childNodes.item(0).childNodes.item(2).outerText;
			}catch(e){
				string += \'0\';
			}
			string += \';
			requests:\';
			try{
				string+= buttons.item(2).childNodes.item(2).childNodes.item(1).childNodes.item(2).outerText;
			}catch(e){
				string += \'0\';
			}
			string += \';
			messages:\';
			try{
				string+= buttons.item(2).childNodes.item(2).childNodes.item(2).childNodes.item(2).outerText;
			}catch(e){
				string += \'0\';
			}
			string += \';
			videos:\';
			try{
				string+= buttons.item(2).childNodes.item(2).childNodes.item(3).childNodes.item(2).outerText;
			}catch(e){
				string += \'0\';
			}
			string += \';
			notifications:\';
			try{
				string+= buttons.item(2).childNodes.item(2).childNodes.item(4).childNodes.item(2).outerText;
			}catch(e){
				string += \'0\';
			}
			string += \';\';
		}
		else
		{
			var string = \'feed:\';
			try{
				string+= buttons.item(1).childNodes.item(3).childNodes.item(0).childNodes.item(2).outerText;
			}catch(e){
				string += \'0\';
			}
			string += \';
			requests:\';
			try{
				string+= buttons.item(1).childNodes.item(3).childNodes.item(1).childNodes.item(2).outerText;
			}catch(e){
				string += \'0\';
			}
			string += \';
			messages:\';
				try{
				string+= buttons.item(1).childNodes.item(3).childNodes.item(2).childNodes.item(2).outerText;
			}catch(e){
				string += \'0\';
			}
			string += \';
			videos:\';
				try{
				string+= buttons.item(1).childNodes.item(3).childNodes.item(3).childNodes.item(2).outerText;
			}catch(e){
				string += \'0\';
			}
			string += \';
			notifications:\';
			try{
				string+= buttons.item(1).childNodes.item(3).childNodes.item(4).childNodes.item(2).outerText;
			}catch(e){
				string += \'0\';
			}
			string += \';\';
		}
		string.replaceAll(\':;\',\':0;\');
		console.log(\'Notification-String is: \'+string);
		return (string);
		}
		getNotificationStates();
	</string>
	<string name="installNotificationObserver" translatable="false">
		javascript:function observeNotifications(){
		var screen = document.getElementById(\'screen-root\');
		while (typeof screen === \'undefined\'){
			screen = document.getElementById(\'screen-root\');
		}
		var observeArea = screen.getElementsByClassName(\'m\');
		while (typeof observeArea === \'undefined\'){
			observeArea = screen.getElementsByClassName(\'m\');
		}
		var observerNotificationBar;
		var callback = function (){window.SlimFBViewer.newNotificationState();};
		if (typeof observerNotificationBar === \'undefined\')
		{

			observerNotificationBar = new MutationObserver(callback);

		}
		try{
			observerNotificationBar.disconnect();
		}catch(e){};
		try{
			const config = {childList:true,
							attributes:true,
							characterData:true,
							subtree:true };
		<!--observerNotificationBar.observe(document.getElementById(\'screen-root\').childNodes[0],config);-->
		observerNotificationBar.observe(observeArea[11],config);
		}catch (e){
		<!--observerNotificationBar.observe(document.getElementById(\'screen-root\').childNodes[0],config);-->
		observerNotificationBar.observe(observeArea[11],config);
		};
		}
		observeNotifications();
	</string>
	<string name="navigateTo" translatable="false">
		javascript:function navigateTo(destination, pressBackFirst, currentView) {
		var index = 0;
		if (currentView !== \'home\'){
			index -=1;
		}
		if (typeof buttons === \'undefined\'){
			var buttons = document.getElementsByClassName(\'m bg-s3\');
		}else{
			buttons = document.getElementsByClassName(\'m bg-s3\');
		}
		if (typeof buttons2 === \'undefined\'){
			var buttons2 = document.getElementsByClassName(\'m bg-s4\');
		}else{
			buttons2 = document.getElementsByClassName(\'m bg-s4\');
		}
		if (pressBackFirst){
			if (typeof backButtons === \'undefined\'){
		   		var backButtons = document.getElementsByClassName(\'m\');
			}else{
				backButtons = document.getElementsByClassName(\'m\');
			}
			switch (currentView) {
				case \'search\':
					if (backbuttons[4] !== null){
						backButtons[4].click();
						break;
					}

				case \'bookmarks\':
					if (backbuttons[4] !== null){
						backButtons[6].click();
						break;
					}
				default:
			}
		}

		switch (destination) {
			case \'friend_requests\':
				buttons[index+4].click();
				break;
			case \'notifications\':
				buttons[index+10].click();
				break;
			case \'bookmarks\':
				if (currentView !== \'home\'){
					buttons[2].click();
				}
				buttons2[1].click();
				break;
			case \'search\':
				if (currentView === \'notifications\'){
					buttons2[1].click();
				}
				buttons2[0].click();
				break;
			case \'home\':
			default:
				buttons[2].click();

		}
		observeBlueBar(destination);

		}
		function observeBlueBar(destination)
		{
			switch (destination){
				case \'home\':
					if (typeof observerNewsFeed === \'undefined\')
					{
						var observerNewsFeed;
						observerNewsFeed = new MutationObserver(removeBlueBarNewsFeed2);

					}
					try
					{
						const config = {childList:true,

									subtree:true };
						<!--observerNewsFeed.observe(document.getElementById(\'screen-root\'),config);-->
						observerNewsFeed.observe(document,config);
					}catch (e)
					{
						<!--observerNewsFeed.observe(document.getElementById(\'screen-root\'),config);-->
						observerNewsFeed.observe(document,config);

					}
					break;
				case \'friend_requests\':
				case \'notifications\':
					if (typeof observer === \'undefined\')
					{
						var observer;
						observer = new MutationObserver(removeBlueBar3);

					}
					try
					{
						const config = {childList:true,
									attributes:true,
									characterData:true,
									subtree:true };
						<!--observer.observe(document.getElementById(\'screen-root\'),config);-->
						observer.observe(document,config);
					}catch (e)
					{
						<!--observer.observe(document.getElementById(\'screen-root\'),config);-->
						observer.observe(document,config);
					}
					break;
				default:
					break;
			}
		}

	</string>
	<string name="adaptMessengerView" translatable="false">
		javascript:function adaptMessengerView(css) {
		var node = document.createElement(\'style\');
		node.innerHTML = css;
        document.body.appendChild(node);
		}
		adaptMessengerView(\'.rq0escxv.l9j0dhe7.du4w35lb.j83agx80.cbu4d94t.g5gj957u.f4tghd1a.ifue306u.kuivcneq {display:none;}\');
	</string>
	<string name="adaptMessengerInfoView" translatable="false">
		javascript:function clickInfoButton() {
		var infoButtons = document.getElementsByClassName(\'oajrlxb2 gs1a9yip g5ia77u1 mtkw9kbi tlpljxtp qensuy8j ppp5ayq2 goun2846 ccm00jje s44p3ltw mk2mc5f4 rt8b4zig n8ej3o3l agehan2d sk4xxmp2 rq0escxv nhd2j8a9 pq6dq46d mg4g778l btwxx1t3 pfnyh3mw p7hjln8o kvgmc6g5 cxmmr5t8 oygrvhab hcukyx3x tgvbjcpo hpfvmrgz jb3vyjys rz4wbd8a qt6c0cv9 a8nywdso l9j0dhe7 i1ao9s8h esuyzwwr f1sip0of du4w35lb lzcic4wl abiwlrkh p8dawk7l\');
		if (infoButtons.fireEvent)
		{
			infoButtons.fireEvent(\'onclick\');
		}
		else
		{
			var mouseEvents = document.createEvent(\'MouseEvents\');
			mouseEvents.initEvent(\'click\',true,false);

			for (const infoButton of infoButtons){
				var infoAttribute = infoButton.getAttribute(\'aria-label\');
				if ( infoAttribute === \'Information über die Unterhaltung\')
				{
					infoButton.dispatchEvent(mouseEvents);
				}
			}
		}
		}
		javascript:function adaptMessengerInfoView(css) {
		var node = document.createElement(\'style\');
		node.innerHTML = css;
        document.body.appendChild(node);
		var targetnode = document.getElementsByClassName(\'rq0escxv l9j0dhe7 du4w35lb j83agx80 cbu4d94t g5gj957u d2edcug0 hpfvmrgz rj1gh0hx buofh1pr dp1hu0rb\');
		const config = {subtree:true,childList:true};
		const callback = function(mutationsList, observer) {for(const mutation of mutationsList) {
        	if (mutation.type === \'childList\') {
         		const infoPane = document.getElementsByClassName(\'rq0escxv l9j0dhe7 du4w35lb q9uorilb\'); (\'rq0escxv pmk7jnqg du4w35lb i09qtzwb oaz4zybt n7fi1qx3 j9ispegn kr520xx4 s45kfl79 emlxlaya bkmhp75w spb7xbtv\');
		 		for (const infoPaneItem of infoPane)
		 		{
					if (infoPaneItem.parentElement.className === \'rq0escxv l9j0dhe7 du4w35lb j83agx80 cbu4d94t pfnyh3mw d2edcug0 bp9cbjyn discj3wi ihqw7lf3\')
					{
						infoPaneItem.addEventListener(\'click\',clickInfoButton);
					}
		 		}
			}
		}
		};
		const observer = new MutationObserver(callback);
		observer.observe(targetnode[0],config);
		}
		function startModifications()
		{
			adaptMessengerInfoView(\'.rq0escxv.l9j0dhe7.du4w35lb.j83agx80.cbu4d94t.g5gj957u.f4tghd1a.ifue306u.kuivcneq.t63ysoy8 {top:0px;}\');
		}
		window.addEventListener(\'onload\', (evt) => {setTimeout(startModifications,1500);});

	</string>

	<string name="adaptMessageViewOld" translatable="false">
		javascript: function adaptMessageView(){
		var divs = document.getElementById(\'viewport\').children;
		for(var i = 0; i &#60; divs.length; i++) {
		if(divs[i].role == \'banner\')
		divs[i].style.display=\'none\';
		if((divs[i].class ==\'ehxjyohh kr520xx4 poy2od1o b3onmgus hv4rvrfc n7fi1qx3\') || (divs[i].class == \'rq0escxv l9j0dhe7 du4w35lb j83agx80 cbu4d94t pfnyh3mw d2edcug0 hpfvmrgz n5hh3s10 t63ysoy8\')
		divs[i].style.display=\'none\';
		if((divs[i].class ==\'rq0escxv l9j0dhe7 du4w35lb\'))
		divs[i].style.margin-top=\'-55px\';
		}
	}
		adaptMessageView();

</string>
	<string name="adaptMessageView" translatable="false">
		javascript: function adaptMessageView(){
		var divs = document.getElementByTagName(\'div\')
		divs[3].setAttribute(\'style\',\'margin-top:-55px;\')
		divs[6].setAttribute(\'style\',\'display:none\')
		divs[1482].setAttribute(\'style\',\'display:none\')
		}
	}
		window.setInterval(adaptMessageView(),2000);

</string>
    <string name="hideHeaderFooterMessages" translatable="false">
		javascript: function hideHeaderFooterMessages(){
	var divs = document.getElementById(\'viewport\').children;
	for(var i = 0; i &#60; divs.length; i++) {
		if(divs[i].id != \'objects_container\')
		divs[i].style.display=\'none\';
	}
}
hideHeaderFooterMessages();
	</string>
	<string name="fixMarkPeople" translatable="false">
		javascript:function fixMarkPeople(){
			try{
					var textInput = document.getElementById(\'composerInput\');
				textInput.oninput = function (correctMentions){
					var mentionsField = document.querySelector(\'div.mentions-suggest\');
  					var commentBox = document.querySelector(\'div.mentions\');
					if (mentionsField != null &amp;&amp; commentBox != null){
    					mentionsField.style.display=\'block\';
   						document.querySelector(\'div.mentions\').appendChild(mentionsField);
  					}
				}
			}catch (e){
				setTimeout(function (){fixMarkPeople();},200);
			}
		}
		fixMarkPeople();
	</string>
<string name="goBack" translatable="false">
	javascript:function goBack(){
		var backButton = window.top.frames.window.document.querySelector(\'[data-sigil=\"MBackNavBarClick\"]\');
		backButton = document.querySelector(\"[data-action-id=\'99\']\");
		console.log(\'Back button is: \'+backButton);
		var backButton2 = window.top.frames.window.document.querySelector(\"[id=\'MBackNavBar\']\");
		console.log(\'Back button 2 is: \'+backButton2);
		var backButton3 = window.top.frames.window.document.querySelector(\"[id=\'MBackNavBarLeftArrow\']\");
		console.log(\'Back button 3 is: \'+backButton2);
		var backButton4 = window.top.frames.window.document.getElementById(\'u_0_d_aC\');
		console.log(\'Back button 4 is: \'+backButton3);
		console.log(\'Window list is: \'+window.top.frames);
		<!--window.SlimFBViewer.echoElement(document.body.innerHtml);
		window.SlimFBViewer.echoElement(document.body.outerHtml);
	    window.SlimFBViewer.echoElement(window);-->


		if (backButton !== null) {
			backButton.click();
		}else{
			window.history.back();
		}

	}
	<!-- window.addEventListener(\'change\'goBack(); -->

</string>
	<string name="goBack2" translatable="false">
	javascript:function goBack(){
		if (backButton !== null) {
			backButton.click();
		}
	}
	javascript:function installGoBackFunction(){
		var backButton,backButtonNavBar;
		if (backButton === null){
		   		//var backButtons = document.getElementById(\'MBackNavBarLeftArrow\');
				//backButtonNavBar = document.getElementById(\'MBackNavBar\');
				backButton = document.querySelector("[data-sigil=\'MBackNavBarClick\']");
		}
		console.log(\'Got backbutton:\' + backButton);
	}
	try{
			window.removeEvent(\'load\',setTimeout);
		}
		catch(e)
		{};
	window.addEventListener(\'load\', setTimeout(installGoBackFunction,200));
</string>
</resources>